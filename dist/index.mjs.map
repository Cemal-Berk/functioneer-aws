{"version":3,"sources":["../lib/functioneer-aws.ts"],"sourcesContent":["import { APIGatewayProxyResult, APIGatewayProxyEvent } from \"aws-lambda\";\r\nimport { Functioneer } from \"functioneer\";\r\n\r\n/**\r\n * Gets a handler for a lamda function\r\n * @param runner The function runner\r\n * @param dataSource Where to get the input data from\r\n * @param functionName The function name to be executed. If null the function name will be taken from the input data\r\n * @returns async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> function\r\n */\r\nexport function getLambdaHandler(\r\n  runner: Functioneer,\r\n  dataSource: \"BODY\" | \"PARAMS\" | \"QUERY\",\r\n  functionName?: string\r\n) {\r\n  if (functionName) {\r\n    if (dataSource === \"BODY\") {\r\n      return async (\r\n        event: APIGatewayProxyEvent\r\n      ): Promise<APIGatewayProxyResult> => {\r\n        try {\r\n          const result = await runner.runObj({\r\n            ...JSON.parse(event.body!),\r\n            functionName,\r\n          });\r\n          if (result[\"success\"] === undefined) {\r\n            return {\r\n              statusCode: 200,\r\n              body: result as string,\r\n            } as APIGatewayProxyResult;\r\n          } else if (result[\"success\"] === true) {\r\n            return {\r\n              statusCode: 200,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          } else {\r\n            return {\r\n              statusCode: 500,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          }\r\n        } catch (err) {\r\n          return {\r\n            statusCode: 500,\r\n            body: JSON.stringify({\r\n              message: err,\r\n            }),\r\n          } as APIGatewayProxyResult;\r\n        }\r\n      };\r\n    } else if (dataSource === \"PARAMS\") {\r\n      return async (\r\n        event: APIGatewayProxyEvent\r\n      ): Promise<APIGatewayProxyResult> => {\r\n        try {\r\n          const result = await runner.runObj({\r\n            ...event.pathParameters!,\r\n            functionName,\r\n          });\r\n          if (result[\"success\"] === undefined) {\r\n            return {\r\n              statusCode: 200,\r\n              body: result as string,\r\n            } as APIGatewayProxyResult;\r\n          } else if (result[\"success\"] === true) {\r\n            return {\r\n              statusCode: 200,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          } else {\r\n            return {\r\n              statusCode: 500,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          }\r\n        } catch (err) {\r\n          return {\r\n            statusCode: 500,\r\n            body: JSON.stringify({\r\n              message: err,\r\n            }),\r\n          } as APIGatewayProxyResult;\r\n        }\r\n      };\r\n    } else {\r\n      return async (\r\n        event: APIGatewayProxyEvent\r\n      ): Promise<APIGatewayProxyResult> => {\r\n        try {\r\n          const result = await runner.runObj({\r\n            ...event.queryStringParameters!,\r\n            functionName,\r\n          });\r\n          if (result[\"success\"] === undefined) {\r\n            return {\r\n              statusCode: 200,\r\n              body: result as string,\r\n            } as APIGatewayProxyResult;\r\n          } else if (result[\"success\"] === true) {\r\n            return {\r\n              statusCode: 200,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          } else {\r\n            return {\r\n              statusCode: 500,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          }\r\n        } catch (err) {\r\n          return {\r\n            statusCode: 500,\r\n            body: JSON.stringify({\r\n              message: err,\r\n            }),\r\n          } as APIGatewayProxyResult;\r\n        }\r\n      };\r\n    }\r\n  } else {\r\n    if (dataSource === \"BODY\") {\r\n      return async (\r\n        event: APIGatewayProxyEvent\r\n      ): Promise<APIGatewayProxyResult> => {\r\n        try {\r\n          if (JSON.parse(event.body)[\"functionName\"] === undefined) {\r\n            throw \"functionName is required in body\";\r\n          }\r\n          const result = await runner.runObj({\r\n            ...JSON.parse(event.body!),\r\n          });\r\n          if (result[\"success\"] === undefined) {\r\n            return {\r\n              statusCode: 200,\r\n              body: result as string,\r\n            } as APIGatewayProxyResult;\r\n          } else if (result[\"success\"] === true) {\r\n            return {\r\n              statusCode: 200,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          } else {\r\n            return {\r\n              statusCode: 500,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          }\r\n        } catch (err) {\r\n          return {\r\n            statusCode: 500,\r\n            body: JSON.stringify({\r\n              message: err,\r\n            }),\r\n          } as APIGatewayProxyResult;\r\n        }\r\n      };\r\n    } else if (dataSource === \"PARAMS\") {\r\n      return async (\r\n        event: APIGatewayProxyEvent\r\n      ): Promise<APIGatewayProxyResult> => {\r\n        try {\r\n          if (event.pathParameters[\"functionName\"] === undefined) {\r\n            throw \"functionName is required in pathParameters\";\r\n          }\r\n          const result = await runner.runObj({\r\n            ...event.pathParameters!,\r\n            functionName: event.pathParameters![\"functionName\"],\r\n          });\r\n          if (result[\"success\"] === undefined) {\r\n            return {\r\n              statusCode: 200,\r\n              body: result as string,\r\n            } as APIGatewayProxyResult;\r\n          } else if (result[\"success\"] === true) {\r\n            return {\r\n              statusCode: 200,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          } else {\r\n            return {\r\n              statusCode: 500,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          }\r\n        } catch (err) {\r\n          return {\r\n            statusCode: 500,\r\n            body: JSON.stringify({\r\n              message: err,\r\n            }),\r\n          } as APIGatewayProxyResult;\r\n        }\r\n      };\r\n    } else {\r\n      return async (\r\n        event: APIGatewayProxyEvent\r\n      ): Promise<APIGatewayProxyResult> => {\r\n        try {\r\n          if (event.queryStringParameters[\"functionName\"] === undefined) {\r\n            throw \"functionName is required in queryStringParameters\";\r\n          }\r\n          const result = await runner.runObj({\r\n            ...event.queryStringParameters!,\r\n            functionName: event.queryStringParameters![\"functionName\"],\r\n          });\r\n          if (result[\"success\"] === undefined) {\r\n            return {\r\n              statusCode: 200,\r\n              body: result as string,\r\n            } as APIGatewayProxyResult;\r\n          } else if (result[\"success\"] === true) {\r\n            return {\r\n              statusCode: 200,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          } else {\r\n            return {\r\n              statusCode: 500,\r\n              body: JSON.stringify(result),\r\n            } as APIGatewayProxyResult;\r\n          }\r\n        } catch (err) {\r\n          return {\r\n            statusCode: 500,\r\n            body: JSON.stringify({\r\n              message: err,\r\n            }),\r\n          } as APIGatewayProxyResult;\r\n        }\r\n      };\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}